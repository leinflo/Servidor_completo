#include<pthread.h>
#include<baseDatos.h>
#include<stdio.h>
#include<stdlib.h>
#include"baseDatos.h"

int Conectar(char *direccionIP){

	int puede_conectar;

	puede_conectar=	PuedeConectarse(direccionIP);
	
	if(puede_conectar == 0){

	return 0;

	}
	else{
		
	return 1;
	
	}

}

void *funcionAgente(void *parametros){

	int a, puede_conectarse;

	char buffer[200],*hash;
	char dirIP[15];
	struct param *paramet;
	int opcion;
	
	printf("parametros recibidos \n");

	paramet = (struct param *)parametros;	

	strcpy(buffer,paramet->mensaje);
	strcpy(dirIP,paramet->direccionIP);
	
	printf("Direccion IP %s buffer: %s \n",dirIP,paramet->mensaje);
	opcion = bandera(paramet->mensaje);

	switch(opcion){
	
	//primera vez que se conecta, se valida la IP y el 
	case 0:

	printf("caso 0\n");
	printf("buffer %s \n",buffer);

	hash=digesto(buffer);

	printf("Direccion IP %s hash: %s \n",dirIP,hash);

	ValidaEquipo(dirIP,hash);

	break;
	
	case 1:

	printf("caso 1\n");	

	puede_conectarse = Conectado(dirIP);//Conectar(direccionIP);	
	
	if(puede_conectarse == 0){
	
	printf("Agente conectado con éxito\n");	
	
	}
	else{

	printf("no se pudo conectar el agente\n");

	}

	break;

	//recibe información de procesos.
	case 2:
	
	printf("caso 2\n");

	AlmacenaProcesos(buffer,dirIP);
	
	break;

	//recibe información de renombre de archivos
	case 3:

	printf("caso 3\n");

	AlmacenaRenombre(buffer,dirIP);//caso 3

	break; 
	

	//recibe información de cambios en carpetas y archivos.
	case 4:

	printf("caso 4\n");

	AlmacenaCambio(buffer,dirIP);//caso 4


	break; 

	//recibe información de borrado de carpetas y archivos.
	case 5:
	printf("caso 5\n");

	AlmacenaBorrado(buffer,dirIP);// caso 5

	break;

	//recibe información de termino de proceso no permitido.
	case 6:

	printf("caso 6\n"); //caso 6

	AlmacenaFinProcesos(buffer,dirIP);

	break;

	//Agente desconectado
	case 7:

	printf("caso 7\n");
	//Desconectado(dirIP);//caso 7

	break;

	
	default:

	break;
	    
}
pthread_exit((void *)a);

}

void ValidaEquipoConectado(char* direccionIP, char *digesto){

int validado=1;

validado = ValidaEquipo(direccionIP, digesto);

if(validado !=0){

	printf("No pudo ser validado el servidor %s con el digesto %s\n",direccionIP,digesto);
}
else{
printf("Validado exitosamente\n");
}

}


void principal(){
	
	//numero de conexiones que se pueden realizar
	int conexiones = 1024;
	pthread_t child[100];

	int num_hilos = 0;

	//definicion de las estructuras del cliente y del servidor
	struct sockaddr_in direccion,cliente;
	struct param parametros[100];
	
	//identificadores de los sockets
	int _socket_,aceptacliente;
	//variables de tipo entero para diversas cosas
	int puede_conectarse,valida,opcion, n;
	//longitud de la estructura cliente;
	socklen_t clilen;
	
	char direccionIP[15],buffer[300],*hash;
	
	//creación de socket tcp para validar la conexión de los agentes y mantener una sesión con ellos. 	
	_socket_ = socket(AF_INET,SOCK_DGRAM,0);
	if(_socket_<0){
	perror("hubo un error al abrir el socket UDP\n");
	exit(1);
	}
    	printf("abriendo socket\n");
	
	//definicion de los parametros de la estructura servidor;
	direccion.sin_family = AF_INET;
	direccion.sin_port = htons(PUERTO);

	printf("asociando al puerto %d \n",PUERTO);

	//permite conexiones de cualquier agente;
	direccion.sin_addr.s_addr = INADDR_ANY;

	//bind de la direccion y el puerto
	if(bind(_socket_, (struct sockaddr *)&direccion, sizeof(direccion))<0){
	perror("hubo un error al ligar la direccion con el puerto\n");
	exit(1);
	}
    	printf("asociando socket al puerto\n");


	


	//evitar que muera el servidor
	while (1) 
	{
    	if(num_hilos<=0){
	num_hilos=0;
	}
	else{
	num_hilos--;	
	}
	    //creación de un nuevo hilo

	printf("num_hilos %d \n",num_hilos);
	
	n = recvfrom(_socket_,(char *)buffer,300,0,(struct sockaddr *)&cliente,&clilen);
	
	if(n<0){
	perror("error al recibir mensaje\n");
	}
	    printf("\n se conecto el agente %s con puerto %d\n", inet_ntoa(cliente.sin_addr), ntohs(cliente.sin_port));
	printf("tamaño %d buffer original %s  \n",n,buffer);
	bzero(&parametros[num_hilos],sizeof(parametros[num_hilos]));
	strcpy(parametros[num_hilos].direccionIP,inet_ntoa(cliente.sin_addr));
	printf("direcion IP %s \n",parametros[num_hilos].direccionIP);
	strcpy(parametros[num_hilos].mensaje,buffer);
	printf("buffer %s \n",parametros[num_hilos].mensaje);
		//recepción del primer mensaje
	//n = recv(aceptacliente,(char *)buffer,sizeof(buffer),0);
	//printf("Se recibio del agente %s\n",buffer);
	
	pthread_create(&child[num_hilos], NULL, funcionAgente,&parametros[num_hilos]); //parametros casting 

	pthread_join(&child[num_hilos], NULL);

	num_hilos++;

	printf("salio del hilo");

	}		
}


